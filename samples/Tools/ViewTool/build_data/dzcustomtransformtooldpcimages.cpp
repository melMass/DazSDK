/**********************************************************************
	Generated by DAZ PreCompiler from the following files:
		tool_icon_base.png

	Copyright (c) 2002-2020 Daz 3D, Inc - All Rights Reserved.
**********************************************************************/

/*****************************
	Include files
*****************************/
#include <QtGui/QImage>
#include "dpcimages.h"

struct DpcEmbeddedImageData
{
	const char			*name;
	int					width, height;
	bool				alpha;
	int					compressedSize;
	const unsigned char	*data;
};

// Generated from the file: tool_icon_base.png
static const unsigned char image_0_data[529] = {
	0x00,0x00,0x09,0x00,0x78,0x9C,0xB5,0x95,0x3B,0x4B,0x03,0x41,0x14,0x85,0x55,0xC4,0xCE,0x07,0x58,0x58,
	0xF8,0x6C,0xB4,0x8D,0xFA,0x0B,0x4C,0x61,0x13,0x2C,0x02,0x22,0x0A,0x22,0x1A,0x0B,0x51,0x51,0x30,0xBD,
	0xC5,0x82,0x5D,0xFE,0x80,0x9D,0xA4,0x97,0x10,0x3B,0xC1,0x42,0x04,0x05,0x11,0x2D,0x22,0x2A,0xDA,0x18,
	0x05,0x0B,0x8D,0x8A,0x46,0x08,0x09,0x18,0xE3,0x78,0x2E,0x39,0x2B,0xD7,0x65,0xB3,0x09,0x51,0x07,0x3E,
	0x66,0x76,0xE7,0xCE,0x99,0xBB,0x67,0xEE,0xEE,0x1A,0x63,0x6A,0x4C,0x15,0x54,0xDA,0xAA,0xD1,0x76,0xEA,
	0x17,0x0A,0x85,0x16,0x10,0x05,0x69,0x60,0xC0,0x2D,0xB0,0xFE,0x50,0x3F,0x41,0xDD,0x3D,0xD1,0xA5,0xBE,
	0x5C,0xCF,0xFC,0x56,0x1F,0x1A,0x41,0x6A,0x45,0xD5,0xBD,0x1E,0xEE,0xF5,0x17,0xFA,0x16,0xF5,0x87,0xFE,
	0xC3,0xFF,0x4A,0xF4,0x5D,0xEE,0xB5,0x83,0x30,0xD8,0x07,0x2F,0x20,0x47,0x5E,0xC1,0x11,0x98,0x07,0xAD,
	0xD4,0x9F,0xA1,0xBE,0xE5,0xF0,0x47,0xCE,0xDA,0xD2,0xFA,0x18,0x37,0x80,0x10,0xB8,0x03,0x1F,0x25,0x28,
	0xB0,0xBF,0x06,0x23,0xAC,0x9D,0x34,0x59,0xE1,0x79,0xD8,0xE7,0xED,0xD4,0x5F,0x05,0x79,0xF0,0x09,0x9E,
	0xC0,0x26,0x18,0x05,0xBD,0xA0,0x0F,0x8C,0x81,0x38,0x78,0x33,0xC5,0xF6,0x0E,0x66,0xA1,0xD3,0xAF,0x6A,
	0xC6,0xE8,0xF3,0xB6,0xF5,0xD1,0x4F,0x82,0x0C,0xF3,0x13,0x5F,0xBA,0x79,0xBF,0x19,0x5C,0x48,0xAF,0xF2,
	0x90,0xFD,0xAE,0x18,0x2B,0xFE,0x05,0xE9,0x8B,0xEC,0x33,0x24,0xFE,0x38,0xFD,0x47,0x9F,0x62,0xDE,0x3B,
	0xB6,0x16,0xFA,0x01,0xF0,0xCC,0x5C,0xA5,0x1F,0x50,0xEB,0xDA,0xC0,0x01,0xD7,0x24,0xDD,0xCE,0x56,0xD5,
	0x4F,0x98,0x71,0xF2,0xBC,0x5D,0x6A,0x6E,0x11,0x6C,0x50,0x5B,0xFA,0x05,0xC7,0x5A,0x9F,0xF2,0x33,0xE4,
	0xA1,0x7F,0xC9,0x98,0x2D,0xDE,0xEB,0x06,0x4B,0x2A,0xE6,0x58,0x8D,0x97,0x94,0x77,0x75,0x60,0x8F,0x6B,
	0x4F,0x3C,0xF4,0xB3,0x8C,0x19,0xA6,0xDF,0x37,0x20,0xA6,0x62,0x12,0x6A,0x1C,0xE3,0xBC,0xED,0xE1,0x14,
	0xD7,0xA6,0x3D,0xF4,0xED,0xD6,0xC4,0x73,0x33,0x3C,0x8F,0x53,0x92,0x55,0xE3,0x14,0xE7,0xAF,0xB8,0xBE,
	0xC3,0xAE,0xD9,0x0A,0xF4,0x1B,0xAB,0xC8,0xBF,0x8D,0xF9,0x7B,0xE9,0xE7,0x98,0x83,0x5F,0xF9,0xBF,0x5C,
	0xCE,0x7F,0x5E,0x4F,0x52,0x3F,0xE3,0xA1,0x7F,0xCE,0x98,0x38,0x6A,0xB7,0x56,0xCD,0x2D,0x94,0xA9,0x9F,
	0x7A,0xB0,0xCD,0xDC,0x0E,0x4D,0xE9,0xEF,0xD5,0x22,0xF5,0xA5,0xD6,0x7C,0x6A,0xBD,0xB3,0xFE,0xC5,0x1B,
	0x4B,0xCD,0xFB,0xB9,0x46,0xEA,0x7A,0xDC,0x43,0x5F,0xBE,0x3B,0x0F,0xDC,0x63,0x17,0xB4,0x2B,0x8D,0xEF,
	0xF7,0x17,0xAC,0x73,0xAF,0x69,0xD0,0x29,0xBE,0x31,0xF7,0x33,0x0F,0x6D,0x5B,0x27,0x08,0x1E,0x19,0x9F,
	0x04,0x83,0x2E,0x5E,0x46,0x54,0x2D,0x3C,0x31,0x9F,0x7B,0x53,0xAC,0xEB,0xB2,0xDF,0x72,0x8C,0xE7,0xF8,
	0xAC,0xD2,0x32,0x7C,0x16,0x1D,0xBB,0x66,0x7E,0xB6,0x3C,0x9F,0xA5,0xA2,0x7F,0x05,0xF7,0x08,0xD0,0x8F,
	0x0F,0x97,0xD8,0x88,0xD2,0xB5,0x5B,0xD9,0x7F,0xA0,0x8B,0x0F,0xF2,0x9E,0x4D,0xB8,0xC4,0xAE,0x18,0xF7,
	0x16,0x28,0xA5,0xFD,0x05,0x09,0x7F,0xB1,0xEE
};
static const DpcEmbeddedImageData s_embeddedImages[] = {
	{ "tool_icon_base", 24, 24, true, 529, image_0_data },
	{ 0, 0, 0, 0 }
};

/*********************************************************************/
QImage getEmbeddedImage( const char *name )
{
	const DpcEmbeddedImageData	*data = s_embeddedImages;
	while( data->name != 0 ){
		if( strcmp( data->name, name ) == 0 ){
			QByteArray	bytes( data->compressedSize, '\0' );
			QImage		img( data->width, data->height, data->alpha ? QImage::Format_ARGB32 : QImage::Format_RGB32 );
			memcpy( bytes.data(), data->data, data->compressedSize );
			bytes = qUncompress( bytes );

			if( QSysInfo::ByteOrder == QSysInfo::BigEndian ){
				int i, num = bytes.size();
				char temp, temp2;
				char *bytesData = bytes.data();
				for( i = 0; i < num; i += 4 ){
					temp = bytesData[i];
					temp2 = bytesData[i + 1];
					bytesData[i] = bytesData[i + 3];
					bytesData[i + 1] = bytesData[i + 2];
					bytesData[i + 2] = temp2;
					bytesData[i + 3] = temp;
				}
			}

			memcpy( img.bits(), bytes.data(), bytes.size() );
			return img;
		}
		data++;
	}
	return QImage();
}